# -*- org -*-
#+TITLE: Notes for Delaunay Triangulation Project
#+COLUMNS: %8TODO %10WHO %3PRIORITY %3HOURS(HRS) %80ITEM
#+OPTIONS: author:nil creator:t H:9 ^:nil
#+HTML_HEAD: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=IBM+Plex+Sans:400,400i,600,600i">
#+HTML_HEAD: <link rel="stylesheet" href="org-mode.css" type="text/css"/>

* Links

** Delaunay

   http://page.mi.fu-berlin.de/faniry/files/faniry_aims.pdf

   https://en.m.wikibooks.org/wiki/Trigonometry/For_Enthusiasts/Delaunay_triangulation

** Winged Edge

   https://en.wikipedia.org/wiki/Winged_edge

   https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/model/winged-e.html

   https://people.cs.clemson.edu/~dhouse/courses/405/papers/winged-edge.pdf


* Point-in-triangle hit test:
  
  From https://totologic.blogspot.com/2014/01/accurate-point-in-triangle-test.html (is this ActionScript?):

  #+BEGIN_EXAMPLE
    const EPSILON:Number = 0.001; // Not sure how we come up with this value.
    const EPSILON_SQUARE:Number = EPSILON*EPSILON;

    /**
     ,* Originally named "side", but this is actually the dot product between two vectors:
     ,* 1) The vector that is left-orthogonal to the given side (p1 -> p2) (TODO: make sure this arrow goes the right way)
     ,* 2) The vector from the starting point of the side to the point being tested.
     ,*/
    function dotProductWithSideOrthogonal(x1, y1, x2, y2, x, y:Number):Number
    {
     return (y2 - y1)*(x - x1) + (-x2 + x1)*(y - y1);
    }

    /**
     ,* "Naive" because when the point is extremely close to (or exactly on) a side, the dot product can give spurious
     ,* results.
     ,*/
    function naivePointInTriangle(x1, y1, x2, y2, x3, y3, x, y:Number):Boolean
    {
     var checkSide1:Boolean = dotProductWithSideOrthogonal(x1, y1, x2, y2, x, y) >= 0;
     var checkSide2:Boolean = dotProductWithSideOrthogonal(x2, y2, x3, y3, x, y) >= 0;
     var checkSide3:Boolean = dotProductWithSideOrthogonal(x3, y3, x1, y1, x, y) >= 0;
     return checkSide1 && checkSide2 && checkSide3;
    }

    function pointInTriangleBoundingBox(x1, y1, x2, y2, x3, y3, x, y:Number):Boolean
    {
     var xMin:Number = Math.min(x1, Math.min(x2, x3)) - EPSILON;
     var xMax:Number = Math.max(x1, Math.max(x2, x3)) + EPSILON;
     var yMin:Number = Math.min(y1, Math.min(y2, y3)) - EPSILON;
     var yMax:Number = Math.max(y1, Math.max(y2, y3)) + EPSILON;

     if ( x < xMin || xMax < x || y < yMin || yMax < y )
      return false;
     else
      return true;
    }

    function distanceSquarePointToSegment(x1, y1, x2, y2, x, y:Number):Number
    {
     var p1_p2_squareLength:Number = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1);
     var dotProduct:Number = ((x - x1)*(x2 - x1) + (y - y1)*(y2 - y1)) / p1_p2_squareLength;
     if ( dotProduct < 0 )
     {
      return (x - x1)*(x - x1) + (y - y1)*(y - y1);
     }
     else if ( dotProduct <= 1 )
     {
      var p_p1_squareLength:Number = (x1 - x)*(x1 - x) + (y1 - y)*(y1 - y);
      return p_p1_squareLength - dotProduct * dotProduct * p1_p2_squareLength;
     }
     else
     {
      return (x - x2)*(x - x2) + (y - y2)*(y - y2);
     }
    }

    function accuratePointInTriangle(x1, y1, x2, y2, x3, y3, x, y:Number):Boolean
    {
     if (! pointInTriangleBoundingBox(x1, y1, x2, y2, x3, y3, x, y))
      return false;

     if (naivePointInTriangle(x1, y1, x2, y2, x3, y3, x, y))
      return true;

     if (distanceSquarePointToSegment(x1, y1, x2, y2, x, y) <= EPSILON_SQUARE)
      return true;
     if (distanceSquarePointToSegment(x2, y2, x3, y3, x, y) <= EPSILON_SQUARE)
      return true;
     if (distanceSquarePointToSegment(x3, y3, x1, y1, x, y) <= EPSILON_SQUARE)
      return true;

     return false;
    }
  #+END_EXAMPLE
